name: publish

on: push

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: build ${{ matrix.os == 'ubuntu-latest' && 'Linux' || 'Windows' }} (${{ matrix.cuda && 'CUDA' || matrix.vulkan && 'Vulkan' || 'CPU' }}) ðŸ“¦
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest] #, windows-latest]
        cuda: [true, false]
        vulkan: [true, false]
        exclude:
          - os: ubuntu-latest
            cuda: true
            vulkan: true
        include:
          - os: ubuntu-latest
            cuda: false
            vulkan: false
            artifact_name: arey-x86_64-linux
          - os: ubuntu-latest
            cuda: true
            vulkan: false
            artifact_name: arey-cuda-x86_64-linux
          - os: ubuntu-latest
            cuda: false
            vulkan: true
            artifact_name: arey-vulkan-x86_64-linux
          - os: windows-latest
            cuda: false
            vulkan: false
            artifact_name: arey-x86_64-windows
         # - os: windows-latest
         #   cuda: true
         #   vulkan: false
         #   artifact_name: arey-cuda-x86_64-windows
         # - os: windows-latest
         #   cuda: false
         #   vulkan: true
         #   artifact_name: arey-vulkan-x86_64-windows

    steps:
    - uses: actions/checkout@v4
    - name: Install CUDA
      if: matrix.cuda
      uses: jimver/cuda-toolkit@v0.2.24 # see https://github.com/Jimver/cuda-toolkit/issues/395
      with:
        cuda: 12.9.0
        method: 'network'
        # sub-packages: '["nvcc", "cudart", "cccl", "nvtx", "nvrtc"]'
        # non-cuda-sub-packages: '["libcublas"]'
        log-file-suffix: '${{matrix.os}}.txt'
    - name: Install Vulkan
      if: matrix.vulkan
      run: |
        wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-noble.list https://packages.lunarg.com/vulkan/lunarg-vulkan-noble.list
        sudo apt-get update
        sudo apt-get install -y vulkan-sdk
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    - name: Cache toolchain and deps
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-publish-${{ matrix.artifact_name }}-${{ hashFiles('Cargo.lock') }}
    - name: Build
      run: cargo build --release ${{ matrix.cuda && '--features cuda' || matrix.vulkan && '--features vulkan' || '' }}
    - name: Package artifacts (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        mkdir -p dist
        tar -czvf dist/${{ matrix.artifact_name }}.tar.gz -C target/release arey --owner=0 --group=0
    - name: Package artifacts (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        mkdir dist
        Compress-Archive -Path "target\release\arey.exe" -DestinationPath "dist\${{ matrix.artifact_name }}.zip"
    - name: Store artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.artifact_name }}.*

  version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: release-please
        id: release
        if: github.ref == 'refs/heads/master'
        run: |
          npx release-please release-pr --token=${{ secrets.GITHUB_TOKEN }} --repo-url=codito/arey --debug
    outputs:
      build_version: ${{ steps.release.outputs.tag_name }}
      release_created: ${{ steps.release.outputs.release_created }}

  # publish-to-crates-io:
  #   name: publish to crates.io
  #   needs: [version, build]
  #   if: ${{ needs.version.outputs.release_created }} # only publish tagged versions
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Install Rust toolchain
  #     uses: dtolnay/rust-toolchain@stable
  #     with:
  #       toolchain: stable
  #       components: rust-src, rustfmt, clippy
  #   - name: Publish to crates.io
  #     env:
  #       CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
  #     run: cargo publish

  github-release:
    name: sign release
    needs: [version, build]
    if: ${{ needs.version.outputs.release_created }} # only publish tagged versions
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts # All artifacts will be downloaded into this directory, each in its own sub-directory named after the artifact name.
        
    - name: Sign artifacts
      uses: sigstore/gh-action-sigstore-python@v1.2.3
      with:
        inputs: artifacts/*/* # match artifacts/arey-x86_64-linux/arey-x86_64-linux.tar.gz
          
    - name: Upload to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh release upload \
            '${{ needs.version.outputs.build_version }}' \
            artifacts/*/* \
            --repo '${{ github.repository }}'
