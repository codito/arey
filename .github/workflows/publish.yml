name: publish

on: push

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: build ${{ matrix.os == 'ubuntu-latest' && 'Linux' || 'Windows' }} (${{ matrix.cuda && 'CUDA' || 'CPU' }}) ðŸ“¦
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        cuda: [true, false]
        include:
          - os: ubuntu-latest
            cuda: false
            artifact_name: arey-x86_64-linux
          - os: ubuntu-latest
            cuda: true
            artifact_name: arey-cuda-x86_64-linux
          - os: windows-latest
            cuda: false
            artifact_name: arey-x86_64-windows
          - os: windows-latest
            cuda: true
            artifact_name: arey-cuda-x86_64-windows

    steps:
    - uses: actions/checkout@v4
    - name: Install CUDA
      if: matrix.cuda
      uses: jimver/cuda-toolkit@master
      with:
        cuda: 12.9
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    - name: Cache toolchain and deps
      uses: actions/cache@v3
      with:
        path: |
          ${{ matrix.os == 'windows-latest' && 'C:\\Users\\runneradmin\\.cargo\\registry' || '~/.cargo/registry' }}
          ${{ matrix.os == 'windows-latest' && 'C:\\Users\\runneradmin\\.cargo\\git' || '~/.cargo/git' }}
          target
        key: ${{ runner.os }}-publish-${{ matrix.artifact_name }}-${{ hashFiles('Cargo.lock') }}
    - name: Build
      run: cargo build --release ${{ matrix.cuda && '--features cuda' || '' }}
    - name: Package artifacts
      run: |
        mkdir dist
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          tar -czvf dist/${{ matrix.artifact_name }}.tar.gz -C target/release arey --owner=0 --group=0
        else
          Compress-Archive -Path "target/release/arey.exe" -DestinationPath "dist/${{ matrix.artifact_name }}.zip"
        fi
    - name: Store artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.artifact_name }}.*

  release-please:
    runs-on: ubuntu-latest
    steps:
    - uses: googleapis/release-please-action@v4
      id: release
      if: github.ref == 'refs/heads/master'
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        release-type: rust

  publish-to-crates-io:
    name: publish to crates.io
    if: startsWith(github.ref, 'refs/tags/')
    needs: [release-please, build]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: rust-src, rustfmt, clippy
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
      run: cargo publish

  github-release:
    name: sign release
    needs: [publish-to-crates-io, build]
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts # All artifacts will be downloaded into this directory, each in its own sub-directory named after the artifact name.
        
    - name: Sign artifacts
      uses: sigstore/gh-action-sigstore-python@v1.2.3
      with:
        inputs: artifacts/*/* # match artifacts/arey-x86_64-linux/arey-x86_64-linux.tar.gz
          
    - name: Upload to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh release upload \
          '${{ github.ref_name }}' \
          artifacts/*/* \
          --repo '${{ github.repository }}'
