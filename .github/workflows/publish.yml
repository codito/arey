name: publish

on: push

permissions:
  contents: write
  pull-requests: write

jobs:
  build-linux:
    name: build Linux (non-CUDA) ðŸ“¦
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install Rust toolchain
      id: rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    - name: Cache toolchain and deps
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-publish
    - name: Cargo build
      run: cargo build --release
    - name: Package artifacts
      run: |
        mkdir dist
        tar -czvf dist/${GITHUB_REPOSITORY##*/}-release-x86_64-linux.tar.gz \
            -C target/release \
            arey \
            --owner=0 --group=0
    - name: Store artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: dist/
        
  build-windows:
    name: build Windows (non-CUDA) ðŸ“¦
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    - name: Cache toolchain and deps
      uses: actions/cache@v3
      with:
        path: |
          C:\Users\runneradmin\.cargo\registry
          C:\Users\runneradmin\.cargo\git
          target
        key: ${{ runner.os }}-publish-windows-${{ hashFiles('Cargo.lock') }}
    - name: Build
      run: cargo build --release
    - name: Package artifacts
      run: |
        mkdir dist
        Compress-Archive -Path "target/release/arey.exe" -DestinationPath "dist/arey-release-x86_64-windows.zip"
    - name: Store artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-windows
        path: dist/

  build-cuda-linux:
    name: build CUDA (Linux) ðŸ“¦
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Install CUDA
      uses: jimver/cuda-toolkit@master
      with:
        cuda: 12.9
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    - name: Cache toolchain and deps
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-publish-cuda-${{ hashFiles('Cargo.lock') }}
    - name: Build with CUDA
      run: cargo build --release --features cuda
    - name: Package artifacts
      run: |
        mkdir dist
        tar -czvf dist/${GITHUB_REPOSITORY##*/}-release-x86_64-linux-cuda.tar.gz \
            -C target/release \
            arey \
            --owner=0 --group=0
    - name: Store CUDA artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-cuda-linux
        path: dist/

  build-cuda-windows:
    name: build CUDA (Windows) ðŸ“¦
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Install CUDA
      uses: jimver/cuda-toolkit@master
      with:
        cuda: 12.9
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    - name: Cache toolchain and deps
      uses: actions/cache@v3
      with:
        path: |
          C:\Users\runneradmin\.cargo\registry
          C:\Users\runneradmin\.cargo\git
          target
        key: ${{ runner.os }}-publish-cuda-${{ hashFiles('Cargo.lock') }}
    - name: Build with CUDA
      run: cargo build --release --features cuda
    - name: Package artifacts
      run: |
        mkdir dist
        Compress-Archive -Path "target/release/arey.exe" -DestinationPath "dist/arey-release-x86_64-windows-cuda.zip"
    - name: Store CUDA artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-cuda-windows
        path: dist/

  release-please:
    runs-on: ubuntu-latest
    steps:
    - uses: googleapis/release-please-action@v4
      id: release
      if: github.ref == 'refs/heads/master'
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        release-type: rust

  publish-to-crates-io:
    name: publish to crates.io
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-linux, release-please]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: rust-src, rustfmt, clippy
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
      run: cargo publish

  github-release:
    name: sign release
    needs: [publish-to-crates-io, build-linux, build-windows, build-cuda-linux, build-cuda-windows]
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
    - name: Download main artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: dist_linux/
        
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts-windows
        path: dist_windows/
        
    - name: Download CUDA Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts-cuda-linux
        path: dist_cuda_linux/
        
    - name: Download CUDA Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts-cuda-windows
        path: dist_cuda_windows/
        
    - name: Sign artifacts
      uses: sigstore/gh-action-sigstore-python@v1.2.3
      with:
        inputs: >-
          ./dist_linux/*.tar.gz
          ./dist_windows/*.zip
          ./dist_cuda_linux/*.tar.gz
          ./dist_cuda_windows/*.zip
          
    - name: Upload to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh release upload \
          '${{ github.ref_name }}' \
          ./dist_linux/* \
          ./dist_windows/* \
          ./dist_cuda_linux/* \
          ./dist_cuda_windows/* \
          --repo '${{ github.repository }}'
